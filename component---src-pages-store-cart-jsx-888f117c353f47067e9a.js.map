{"version":3,"sources":["webpack:///./src/pages/store/cart.jsx"],"names":["ConnectedCart","connect","itemsInCart","price","dispatch","changeQuantity","item","quantity","type","size","cartState","cartItems","Object","keys","map","key","className","itemId","src","imagePath","title","value","onChange","e","target","handleChange","length"],"mappings":"4FACA,oEAkFMA,EAAgBC,aARE,SAAC,GACvB,MAAO,CAAEC,YADyC,EAAzBA,YACHC,MAD4B,EAAZA,UAIb,SAAAC,GACzB,MAAO,CAAEC,eAAgB,SAACC,EAAMC,GAAP,OAAoBH,EAAS,CAAEI,KAAK,uBAAyBF,OAAMC,WAAUE,KAAMH,EAAKG,WAG7FR,EA7ET,SAAC,GAA4C,IAqCpDS,EArCUR,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,eAM5BM,EAAYC,OAAOC,KAAKX,GAAaY,KAAI,SAACC,GAC9C,IAAIT,EAAOJ,EAAYa,GACvB,OAAO,yBAAKC,UAAU,sBAAsBD,IAAKT,EAAKW,QACpD,yBAAKD,UAAU,6BACb,yBAAKE,IAAKZ,EAAKa,UAAWH,UAAU,qBAEtC,yBAAKA,UAAU,mBACb,6BAAMV,EAAKc,OACX,yBAAKJ,UAAU,wBAAwBV,EAAKG,OAE9C,yBAAKO,UAAU,2BACb,4BAAQK,MAAOf,EAAKC,SAAUe,SAAU,SAAAC,GAAC,OAf1B,SAACA,EAAGjB,GACvBD,EAAeC,EAAMiB,EAAEC,OAAOH,OAcmBI,CAAaF,EAAGjB,KAC3D,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,wCAGJ,yBAAKU,UAAU,mBACb,8BAAOV,EAAKH,MAAZ,kBAwBN,OAjBEO,EADEC,EAAUe,OAAS,EACR,yBAAKV,UAAU,2BAC1B,6BACGL,GAEH,yBAAKK,UAAU,2BACb,yBAAKA,UAAU,6BAAf,UACA,yBAAKA,UAAU,uBAAuBb,EAAM,GAA5C,SACA,yBAAKa,UAAU,6BAAf,mBACA,yBAAKA,UAAU,6BAAf,kBACA,kBAAC,UAAD,QAKS,oDAIb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,uBAAd,QACCN,MAoBQV","file":"component---src-pages-store-cart-jsx-888f117c353f47067e9a.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './cart.scss';\r\nimport CheckoutButton from \"./checkoutButton\";\r\n\r\nconst Cart = ({ itemsInCart, price, changeQuantity }) => {\r\n\r\n  const handleChange = (e, item) => {\r\n    changeQuantity(item, e.target.value)\r\n  };\r\n\r\n  const cartItems = Object.keys(itemsInCart).map((key) => {\r\n    var item = itemsInCart[key]\r\n    return <div className=\"cart-item-container\" key={item.itemId}>\r\n      <div className=\"cart-item-image-container\">\r\n        <img src={item.imagePath} className=\"cart-item-image\"></img>\r\n      </div>\r\n      <div className=\"cart-item-title\">\r\n        <div>{item.title}</div>\r\n        <div className=\"cart-item-title-size\">{item.size}</div>\r\n      </div>\r\n      <div className=\"cart-item-qty-container\">\r\n        <select value={item.quantity} onChange={e => handleChange(e, item)}>\r\n          <option>0</option>\r\n          <option>1</option>\r\n          <option>2</option>\r\n          <option>3</option>\r\n          <option>4</option>\r\n          <option>5</option>\r\n          <option>6</option>\r\n          <option>7</option>\r\n          <option>8</option>\r\n          <option>9</option>\r\n          <option>10</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"cart-item-price\">\r\n        <span>{item.price},00$ each</span>\r\n      </div>\r\n    </div>\r\n  });\r\n\r\n  let cartState;\r\n  if (cartItems.length > 0) {\r\n    cartState = (<div className=\"cart-checkout-container\">\r\n      <div>\r\n        {cartItems}\r\n      </div>\r\n      <div className=\"cart-finalize-container\">\r\n        <div className=\"cart-checkout-total-title\">Total:</div>\r\n        <div className=\"cart-checkout-price\">{price+10},00 $</div>\r\n        <div className=\"cart-checkout-description\">(incl. 10$ flat</div>\r\n        <div className=\"cart-checkout-description\">rate shipping)</div>\r\n        <CheckoutButton />\r\n      </div>\r\n    </div>)\r\n  }\r\n  else {\r\n    cartState = (<p> Your cart is empty! </p>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart-container\">\r\n      <h1 className=\"cart-checkout-title\">Cart</h1>\r\n      {cartState}\r\n    </div>)\r\n}\r\n\r\nCart.propTypes = {\r\n  itemsInCart: PropTypes.object.isRequired,\r\n  price: PropTypes.number.isRequired,\r\n  changeQuantity: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({ itemsInCart, price }) => {\r\n  return { itemsInCart, price };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return { changeQuantity: (item, quantity) => dispatch({ type: `MODIFY_ITEM_QUANTITY`, item, quantity, size: item.size }) }\r\n}\r\n\r\nconst ConnectedCart = connect(mapStateToProps, mapDispatchToProps)(Cart)\r\n\r\nexport default ConnectedCart;"],"sourceRoot":""}