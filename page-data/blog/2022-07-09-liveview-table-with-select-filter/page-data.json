{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/blog/2022-07-09-liveview-table-with-select-filter/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jean.arjean","author":"jean.arjean"}},"markdownRemark":{"id":"37279b4f-efc4-55df-bcfe-dab4cb1813e1","html":"<p>A Phoenix project with liveview set up in order to do this tutorial, if you don't have one run in your terminal:</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"none\"  >\n          <code slot=\"code\">mix phx.new Tutorial --app tutorial --module Tutorial --database postgres\nmix ecto.create</code>\n        </deckgo-highlight-code>\n<p>Now that you have a working project.\nStart by scaffolding migration, schema, context and liveviews for a product schema that has a name and category column.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"none\"  >\n          <code slot=\"code\">mix phx.gen.live Store Product products name:string category:string\nmix ecto.migrate</code>\n        </deckgo-highlight-code>\n<p>Add the routes to router.ex</p>\n<deckgo-highlight-code language=\"elixir\" terminal=\"none\"  >\n          <code slot=\"code\"># router.ex\n  scope &quot;/&quot;, TutorialWeb do\n    pipe_through :browser\n\n    get &quot;/&quot;, PageController, :index\n\n    # Add this section\n    live &quot;/products&quot;, ProductLive.Index, :index\n    live &quot;/products/new&quot;, ProductLive.Index, :new\n    live &quot;/products/:id/edit&quot;, ProductLive.Index, :edit\n\n    live &quot;/products/:id&quot;, ProductLive.Show, :show\n    live &quot;/products/:id/show/edit&quot;, ProductLive.Show, :edit\n  end</code>\n        </deckgo-highlight-code>\n<p>Navigating to localhost:4000/products should render a page looking like this</p>\n<p><img src=\"./index.png\" alt=\"\"></p>\n<p>Change category to a static enum in order to restrict the kind of products the\nuser can create.</p>\n<deckgo-highlight-code language=\"elixir\" terminal=\"none\"  >\n          <code slot=\"code\"># product.ex\ndefmodule Tutorial.Store.Product do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema &quot;products&quot; do\n    field :category, Ecto.Enum, values: [:shirts, :pants, :shoes]\n    field :name, :string\n\n    timestamps()\n  end\n\n  @doc false\n  def changeset(product, attrs) do\n    product\n    |&gt; cast(attrs, [:name, :category])\n    |&gt; validate_required([:name, :category])\n  end\nend\n</code>\n        </deckgo-highlight-code>\n<p>A way to select a value from this enum is required when creating a product.\nPhoenix a built-in way of doing this.</p>\n<p>Change the <code>text_input</code> to the <code>select</code> line in your product_live/form_component.html.heex</p>\n<deckgo-highlight-code language=\"elixir\" terminal=\"none\"  >\n          <code slot=\"code\"># product_live/form_component.html.heex\n&lt;div&gt;\n  &lt;h2&gt;&lt;%= @title %&gt;&lt;/h2&gt;\n\n  &lt;.form\n    let={f}\n    for={@changeset}\n    id=&quot;product-form&quot;\n    phx-target={@myself}\n    phx-change=&quot;validate&quot;\n    phx-submit=&quot;save&quot;&gt;\n\n    &lt;%= label f, :name %&gt;\n    &lt;%= text_input f, :name %&gt;\n    &lt;%= error_tag f, :name %&gt;\n\n    &lt;%= label f, :category %&gt;\n    &lt;%= select(f, :category, [&quot;Shirts&quot;: :shirts, &quot;Pants&quot;: :pants, &quot;Shoes&quot;: :shoes]) %&gt;\n\n    &lt;%= error_tag f, :category %&gt;\n\n    &lt;div&gt;\n      &lt;%= submit &quot;Save&quot;, phx_disable_with: &quot;Saving...&quot; %&gt;\n    &lt;/div&gt;\n  &lt;/.form&gt;\n&lt;/div&gt;</code>\n        </deckgo-highlight-code>\n<p>The form will now look like this.\n<img src=\"./form.png\" alt=\"\"></p>\n<p>Create a product.</p>\n<p><img src=\"./index2.png\" alt=\"\"></p>\n<p>Add a filter to only visualize the products of a certain category.</p>\n<p>Change the <code>rowspan</code> of the Name and Edit column to 2. Then add a second table header row\nwith a form inside it. This form is used to filter the table by category. Feel free to call <code>humanize</code> on the <code>product.category</code> too to have prettier display of the value.</p>\n<deckgo-highlight-code language=\"elixir\" terminal=\"none\"  >\n          <code slot=\"code\"># product_live/index.html.heex\n&lt;h1&gt;Listing Products&lt;/h1&gt;\n\n&lt;%= if @live_action in [:new, :edit] do %&gt;\n  &lt;.modal return_to={Routes.product_index_path(@socket, :index)}&gt;\n    &lt;.live_component\n      module={TutorialWeb.ProductLive.FormComponent}\n      id={@product.id || :new}\n      title={@page_title}\n      action={@live_action}\n      product={@product}\n      return_to={Routes.product_index_path(@socket, :index)}\n    /&gt;\n  &lt;/.modal&gt;\n&lt;% end %&gt;\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=&quot;2&quot;&gt;Name&lt;/th&gt;\n      &lt;th&gt;Category&lt;/th&gt;\n\n      &lt;th rowspan=&quot;2&quot;&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;\n        &lt;form phx-change=&quot;filter-category&quot;&gt;\n          &lt;select name=&quot;category&quot;&gt;\n            &lt;option value=&quot;All&quot;&gt;All&lt;/option&gt;\n            &lt;%= for category &lt;- [:shirts, :pants, :shoes] do %&gt;\n              &lt;option value={category} selected={category == @category_filter}&gt;&lt;%= humanize(category) %&gt;&lt;/option&gt;\n            &lt;% end %&gt;\n          &lt;/select&gt;\n        &lt;/form&gt;\n      &lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody id=&quot;products&quot;&gt;\n    &lt;%= for product &lt;- @products do %&gt;\n      &lt;tr id={&quot;product-#{product.id}&quot;}&gt;\n        &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;%= humanize(product.category) %&gt;&lt;/td&gt;\n\n        &lt;td&gt;\n          &lt;span&gt;&lt;%= live_redirect &quot;Show&quot;, to: Routes.product_show_path(@socket, :show, product) %&gt;&lt;/span&gt;\n          &lt;span&gt;&lt;%= live_patch &quot;Edit&quot;, to: Routes.product_index_path(@socket, :edit, product) %&gt;&lt;/span&gt;\n          &lt;span&gt;&lt;%= link &quot;Delete&quot;, to: &quot;#&quot;, phx_click: &quot;delete&quot;, phx_value_id: product.id, data: [confirm: &quot;Are you sure?&quot;] %&gt;&lt;/span&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;% end %&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;span&gt;&lt;%= live_patch &quot;New Product&quot;, to: Routes.product_index_path(@socket, :new) %&gt;&lt;/span&gt;</code>\n        </deckgo-highlight-code>\n<p>Handle the form events and store the value of the category filter inside the socket's assigns.\nChange the mount function to add a default value to the category_filter assign.\nAdd an event handler for the filter-category event which will be triggered everytime there's a change\ninside the form.</p>\n<p>And finally adapt the list_products function to include take into account category_filter.</p>\n<deckgo-highlight-code language=\"elixir\" terminal=\"none\"  >\n          <code slot=\"code\"># product_live/index.ex\ndefmodule TutorialWeb.ProductLive.Index do\n  use TutorialWeb, :live_view\n\n  alias Tutorial.Store\n  alias Tutorial.Store.Product\n\n  @impl true\n  def mount(_params, _session, socket) do\n    {:ok,\n     socket\n     |&gt; assign(:category_filter, &quot;All&quot;)\n     |&gt; assign(:products, list_products(&quot;All&quot;))}\n  end\n\n  @impl true\n  def handle_params(params, _url, socket) do\n    {:noreply, apply_action(socket, socket.assigns.live_action, params)}\n  end\n\n  defp apply_action(socket, :edit, %{&quot;id&quot; =&gt; id}) do\n    socket\n    |&gt; assign(:page_title, &quot;Edit Product&quot;)\n    |&gt; assign(:product, Store.get_product!(id))\n  end\n\n  defp apply_action(socket, :new, _params) do\n    socket\n    |&gt; assign(:page_title, &quot;New Product&quot;)\n    |&gt; assign(:product, %Product{})\n  end\n\n  defp apply_action(socket, :index, _params) do\n    socket\n    |&gt; assign(:page_title, &quot;Listing Products&quot;)\n    |&gt; assign(:product, nil)\n  end\n\n  @impl true\n  def handle_event(&quot;delete&quot;, %{&quot;id&quot; =&gt; id}, socket) do\n    product = Store.get_product!(id)\n    {:ok, _} = Store.delete_product(product)\n\n    {:noreply, assign(socket, :products, list_products(socket.assigns.category_filter))}\n  end\n\n  def handle_event(&quot;filter-category&quot;, %{&quot;category&quot; =&gt; category}, socket) do\n    {:noreply,\n     socket\n     |&gt; assign(:category_filter, category)\n     |&gt; assign(:products, list_products(category))}\n  end\n\n  defp list_products(&quot;All&quot;) do\n    Store.list_products()\n  end\n\n  defp list_products(category_filter) do\n    Store.list_products()\n    |&gt; Enum.filter(fn product -&gt;\n      {:safe, category} = html_escape(product.category)\n      category == category_filter\n    end)\n  end\nend</code>\n        </deckgo-highlight-code>\n<p>There you have it, a liveview table with a select filter!</p>\n<p><img src=\"./index3.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/jeanarjean/phoenix-live-view-tutorials/commit/b7f1b6e186eb475488fdc5e71eae5e7c9b548d5d\">Full commit here for reference</a></p>","frontmatter":{"title":"How to create Phoenix LiveView tables with search filter","backgroundColor":"white","tags":["elixir","phoenix","liveview"],"date":"July 09, 2022","image":null}}},"pageContext":{"slug":"/blog/2022-07-09-liveview-table-with-select-filter/","previous":{"fields":{"slug":"/blog/2022-06-18-elixir-phoenix-infinite-console/"},"frontmatter":{"title":"How to have untruncated logs in your Phoenix console","image":null}},"next":{"fields":{"slug":"/blog/2022-10-12-side-project-mindset/"},"frontmatter":{"title":"Side Project Mindset","image":null}}}},
    "staticQueryHashes": ["3868140423"]}