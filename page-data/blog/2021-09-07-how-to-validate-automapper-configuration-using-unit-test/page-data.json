{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/blog/2021-09-07-how-to-validate-automapper-configuration-using-unit-test/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jean.arjean","author":"jean.arjean"}},"markdownRemark":{"id":"d3618068-1993-5e08-a421-22efcd70ac59","html":"<p><em>Disclaimer: this article is written using XUnit but could be done using any test framework.</em></p>\n<p>The simplest way to test your AutoMapper configuration is to write a test and create a MappingConfiguration in the test that you're going to validate.</p>\n<deckgo-highlight-code language=\"csharp\" terminal=\"none\"  >\n          <code slot=\"code\">using Api.V1.Stores.Resources;\nusing AutoMapper;\nusing Xunit;\n\nnamespace UnitTest\n{\n    public class MapperTestManual\n    {\n        private readonly MapperConfiguration _mapperConfiguration;\n\n        public MapperTestManual()\n        {\n            _mapperConfiguration = new MapperConfiguration(cfg =&gt;\n            {\n                cfg.AddProfile&lt;StoreProfile&gt;();\n\n            });\n        }\n\n        [Fact]\n        public void ValidateAutoMapperConfiguration()\n        {\n            _mapperConfiguration.AssertConfigurationIsValid();\n        }\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>This is very good, however when we create a new AutoMapper profile, we have to remind ourselves to add it to our test.</p>\n<p>We can automate this using AutoMapper extensions.</p>\n<p>Depending on if you're using AutoFac or the default Microsoft IoC container, the tests won't be the same but will be similar. I'll show\nyou both alternatives in this article.</p>\n<h1>Using Microsoft IoC Container</h1>\n<p>Note that this requires the use of the package:</p>\n<deckgo-highlight-code language=\"xml\" terminal=\"none\"  >\n          <code slot=\"code\">&lt;PackageReference Include=&quot;AutoMapper.Extensions.Microsoft.DependencyInjection&quot; Version=&quot;8.1.1&quot; /&gt;</code>\n        </deckgo-highlight-code>\n<p>Given a Startup class that has a ConfigureServices method that looks like this:</p>\n<deckgo-highlight-code language=\"csharp\" terminal=\"none\"  >\n          <code slot=\"code\">        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddAutoMapper(typeof(Startup).Assembly);\n        }</code>\n        </deckgo-highlight-code>\n<p>Our test class should look like this.</p>\n<deckgo-highlight-code language=\"csharp\" terminal=\"none\"  >\n          <code slot=\"code\">using Api;\nusing AutoMapper;\nusing Microsoft.Extensions.DependencyInjection;\nusing Xunit;\n\nnamespace UnitTest\n{\n    public class MapperTestServiceCollection\n    {\n        private readonly IConfigurationProvider _mapperConfiguration;\n\n        public MapperTestServiceCollection()\n        {\n            var services = new ServiceCollection();\n            services.AddAutoMapper(typeof(Startup).Assembly);\n            var container = services.BuildServiceProvider();\n\n            var mapper = container.GetService&lt;IMapper&gt;();\n            _mapperConfiguration = mapper.ConfigurationProvider;\n        }\n\n        [Fact]\n        public void ValidateAutoMapperConfiguration()\n        {\n            _mapperConfiguration.AssertConfigurationIsValid();\n        }\n    }\n}</code>\n        </deckgo-highlight-code>\n<h1>Using Autofac</h1>\n<p>Note that this requires to add the dependency AutoMapper.Contrib.Autofac.DependencyInjection.</p>\n<deckgo-highlight-code language=\"xml\" terminal=\"none\"  >\n          <code slot=\"code\">&lt;PackageReference Include=&quot;AutoMapper.Contrib.Autofac.DependencyInjection&quot; Version=&quot;5.4.0&quot; /&gt;</code>\n        </deckgo-highlight-code>\n<p>Given an AutoFac Module looking like this:</p>\n<deckgo-highlight-code language=\"csharp\" terminal=\"none\"  >\n          <code slot=\"code\">// ApiModule.cs\nusing Autofac;\nusing AutoMapper.Contrib.Autofac.DependencyInjection;\n\nnamespace Api\n{\n    public class ApiModule : Module\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterAutoMapper(typeof(Startup).Assembly);\n        }\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>Our test to validate our configuration will look like this.</p>\n<deckgo-highlight-code language=\"csharp\" terminal=\"none\"  >\n          <code slot=\"code\">//MapperTest.cs\nusing Api;\nusing Autofac;\nusing AutoMapper;\nusing Xunit;\n\nnamespace UnitTest\n{\n    public class MapperTestAutoFac\n    {\n        private readonly MapperConfiguration _mapperConfiguration;\n\n        public MapperTestAutoFac()\n        {\n            var builder = new ContainerBuilder();\n            builder.RegisterModule(new ApiModule());\n            var container = builder.Build();\n\n            _mapperConfiguration = container.Resolve&lt;MapperConfiguration&gt;();\n        }\n\n        [Fact]\n        public void ValidateAutoMapperConfiguration()\n        {\n            _mapperConfiguration.AssertConfigurationIsValid();\n        }\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>If you have further questions, feel free to ask them here: <a href=\"mailto:arguinjr@gmail.com?subject=Validate%20AutoMapper%20Configuration\">arguinjr@gmail.com</a></p>","frontmatter":{"title":"How to Validate your AutoMapper Configuration using Unit Test","backgroundColor":"white","tags":["csharp","csproj","xunit","autofac"],"date":"September 08, 2021","image":null}}},"pageContext":{"slug":"/blog/2021-09-07-how-to-validate-automapper-configuration-using-unit-test/","previous":{"fields":{"slug":"/blog/2021-09-04-how-to-fix-object-cycle-detected-properly-automapper/"},"frontmatter":{"title":"How to Fix \"A possible object cycle was detected\" properly in your .Net project using AutoMapper","image":null}},"next":{"fields":{"slug":"/projects/programming/"},"frontmatter":{"title":"Programming Projects","image":null}}}},
    "staticQueryHashes": ["3868140423"]}