{"version":3,"sources":["webpack:///./src/templates/blog-post.jsx"],"names":["BlogPostTemplate","render","post","this","props","data","markdownRemark","image","frontmatter","childImageSharp","fluid","src","backgroundColor","tags","siteTitle","get","pathContext","previous","next","className","style","backgroundImage","title","display","date","height","Tags","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","React","Component","currentColorIndex","map","tag","key","replace","textDecoration","borderRadius","color","fontWeight","width","pageQuery"],"mappings":"oPAOMA,G,4GACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAQL,EAAKM,YAAYD,MAAME,gBAAgBC,MAAMC,IACrDC,EAAkBV,EAAKM,YAAYI,gBACnCC,EAAOX,EAAKM,YAAYK,KACxBC,EAAYC,IAAIZ,KAAKC,MAAO,gCAL3B,EAMoBD,KAAKC,MAAMY,YAA9BC,EAND,EAMCA,SAAUC,EANX,EAMWA,KAElB,OACE,kBAAC,IAAD,KACE,yBACEC,UAAU,iBACVC,MAAO,CACLC,gBAAgB,OAAQd,EAAT,IACfK,gBAAgB,GAAIA,IAGtB,kBAAC,IAAD,CAAQU,MAAUpB,EAAKM,YAAYc,MAAtB,MAAiCR,IAC9C,yBAAKK,UAAU,gBACb,wBAAIA,UAAU,cAAcjB,EAAKM,YAAYc,OAC7C,uBACEF,MAAO,CACLG,QAAS,UAGVrB,EAAKM,YAAYgB,MAEpB,yBAAKJ,MAAO,CAACK,OAAQ,UACrB,kBAACC,EAAD,CAAMb,KAAMA,IACZ,yBAAKO,MAAO,CAACK,OAAQ,UACrB,yBAAKE,wBAAyB,CAAEC,OAAQ1B,EAAK2B,QAC7C,6BAEA,wBACET,MAAO,CACLG,QAAS,OACTO,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGVhB,GACC,4BACE,kBAAC,IAAD,CAAMiB,GAAIjB,EAASkB,OAAOC,KAAMC,IAAI,QAApC,KACKpB,EAAST,YAAYc,QAK7BJ,GACC,4BACE,kBAAC,IAAD,CAAMgB,GAAIhB,EAAKiB,OAAOC,KAAMC,IAAI,QAC7BnB,EAAKV,YAAYc,MADpB,Y,GArDagB,IAAMC,YAkErC,SAASb,EAAKtB,GACZ,IACIoC,GAAqB,EAEzB,OACE,6BACGpC,EAAMS,KAAK4B,KAAI,SAAUC,GAExB,OADAF,GAAqBA,EAAoB,GAAK,EAE5C,0BAAMG,IAAKD,GACT,kBAAC,IAAD,CAAMR,GAAI,SAAWQ,EAAIE,QAAQ,IAAK,KACpCxB,MAAO,CACLR,gBAAiB,qBACjBqB,QAAS,OACTY,eAAgB,OAChBC,aAAc,aACdC,MAAO,UACPC,WAAY,QAEdN,GACF,0BAAMtB,MAAO,CACXG,QAAS,eACT0B,MAAO,cAUNjD,YAER,IAAMkD,EAAS,c","file":"component---src-templates-blog-post-jsx-34bbbfefb643d6d78d2e.js","sourcesContent":["import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { Link, graphql } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport get from 'lodash/get'\r\nimport './blog-post.scss'\r\n\r\nclass BlogPostTemplate extends React.Component {\r\n  render() {\r\n    const post = this.props.data.markdownRemark\r\n    const image = post.frontmatter.image.childImageSharp.fluid.src\r\n    const backgroundColor = post.frontmatter.backgroundColor\r\n    const tags = post.frontmatter.tags\r\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title')\r\n    const { previous, next } = this.props.pathContext\r\n\r\n    return (\r\n      <Layout>\r\n        <div\r\n          className=\"post-container\"\r\n          style={{\r\n            backgroundImage: `url(${image})`,\r\n            backgroundColor: `${backgroundColor}`\r\n          }}\r\n        >\r\n          <Helmet title={`${post.frontmatter.title} | ${siteTitle}`} />\r\n          <div className=\"post-content\">\r\n            <h1 className=\"post-title\">{post.frontmatter.title}</h1>\r\n            <p\r\n              style={{\r\n                display: 'block',\r\n              }}\r\n            >\r\n              {post.frontmatter.date}\r\n            </p>\r\n            <div style={{height: '10px'}}></div>\r\n            <Tags tags={tags} />\r\n            <div style={{height: '10px'}}></div>\r\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\r\n            <hr />\r\n\r\n            <ul\r\n              style={{\r\n                display: 'flex',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'space-between',\r\n                listStyle: 'none',\r\n                padding: 0,\r\n              }}\r\n            >\r\n              {previous && (\r\n                <li>\r\n                  <Link to={previous.fields.slug} rel=\"prev\">\r\n                    ← {previous.frontmatter.title}\r\n                  </Link>\r\n                </li>\r\n              )}\r\n\r\n              {next && (\r\n                <li>\r\n                  <Link to={next.fields.slug} rel=\"next\">\r\n                    {next.frontmatter.title} →\r\n                  </Link>\r\n                </li>\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Tags(props) {\r\n  var colors = ['#242424', '#c21025', '#c21025'];\r\n  var currentColorIndex = -1;\r\n\r\n  return (\r\n    <div>\r\n      {props.tags.map(function (tag) {\r\n        currentColorIndex = (currentColorIndex + 1) % 3;\r\n        return (\r\n          <span key={tag}>\r\n            <Link to={\"/tags/\" + tag.replace(\" \", \"-\")}\r\n              style={{\r\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                padding: '10px',\r\n                textDecoration: 'none',\r\n                borderRadius: '10000000px',\r\n                color: '#f8eeee',\r\n                fontWeight: '550'\r\n              }}\r\n            >{tag}</Link>\r\n            <span style={{\r\n              display: 'inline-block',\r\n              width: '6px'\r\n            }}>\r\n            </span>\r\n          </span>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        title\r\n        backgroundColor\r\n        tags\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        image {\r\n          childImageSharp {\r\n            fluid(maxWidth: 2000) {\r\n              src\r\n              srcSet\r\n              sizes\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}